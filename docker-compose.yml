# Docker Compose for Quiz Platform - Development Environment
version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile.dev
      args:
        NODE_ENV: development
    container_name: quiz-backend-dev
    ports:
      - "3000:3000"
      - "9229:9229"  # Debug port
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./shared:/shared
    environment:
      - NODE_ENV=development
      - PORT=3000
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - JWT_SECRET=${JWT_SECRET:-dev_jwt_secret_key_32_chars_min}
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGIN=http://localhost:5173,http://localhost:3000
      - LOG_LEVEL=debug
    depends_on:
      - redis
    networks:
      - quiz-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Development Server
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile.dev
    container_name: quiz-frontend-dev
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - ./shared:/shared
    environment:
      - VITE_SUPABASE_URL=${SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - VITE_API_URL=http://localhost:3000/api/v1
      - VITE_ENVIRONMENT=development
      - VITE_DEBUG_MODE=true
    depends_on:
      - backend
    networks:
      - quiz-network
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: quiz-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - quiz-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: quiz-nginx-dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.dev.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - quiz-network
    restart: unless-stopped
    profiles:
      - proxy

  # PostgreSQL (if not using Supabase)
  postgres:
    image: postgres:15-alpine
    container_name: quiz-postgres-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=quiz_platform_dev
      - POSTGRES_USER=quiz_user
      - POSTGRES_PASSWORD=quiz_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    networks:
      - quiz-network
    restart: unless-stopped
    profiles:
      - local-db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quiz_user -d quiz_platform_dev"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PgAdmin (if using local PostgreSQL)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: quiz-pgadmin-dev
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@quiz.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - quiz-network
    restart: unless-stopped
    profiles:
      - local-db

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: quiz-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - quiz-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: quiz-grafana-dev
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - quiz-network
    restart: unless-stopped
    profiles:
      - monitoring

  # File storage service (MinIO for S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: quiz-minio-dev
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=quiz_admin
      - MINIO_ROOT_PASSWORD=quiz_password_123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - quiz-network
    restart: unless-stopped
    profiles:
      - storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Analytics worker (for processing analytics data)
  analytics-worker:
    build:
      context: .
      dockerfile: backend/Dockerfile.dev
    container_name: quiz-analytics-worker-dev
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - WORKER_TYPE=analytics
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - REDIS_URL=redis://redis:6379
    command: npm run worker:analytics
    depends_on:
      - redis
      - backend
    networks:
      - quiz-network
    restart: unless-stopped
    profiles:
      - workers

  # Webhook processor
  webhook-worker:
    build:
      context: .
      dockerfile: backend/Dockerfile.dev
    container_name: quiz-webhook-worker-dev
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - WORKER_TYPE=webhook
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - REDIS_URL=redis://redis:6379
    command: npm run worker:webhook
    depends_on:
      - redis
      - backend
    networks:
      - quiz-network
    restart: unless-stopped
    profiles:
      - workers

# Networks
networks:
  quiz-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local

# Health check for the entire stack
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s